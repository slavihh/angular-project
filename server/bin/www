#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const app = require('../app');
const cluster = require('cluster');
const debug = require('debug')('api:server');
const http = require('http');
const numCPUs = require('os').cpus().length;
const models = require('../models/models.js');
let server;

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

if (cluster.isMaster) {
    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    // If a worker dies, log it to the console and start another worker.
    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker ' + worker.process.pid + ' died.');
        cluster.fork();
    });

    // Log when a worker starts listening
    cluster.on('listening', function (worker, address) {
        console.log('Worker started with PID ' + worker.process.pid + '.');
    });

} else {

    /**
     * Create HTTP server.
     */

    server = http.createServer(app);
    console.log(models);
    models.sequelize.sync().then(function () {
        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port, '127.0.0.1');
        server.on('error', onError);
        server.on('listening', onListening);
    });

}

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
